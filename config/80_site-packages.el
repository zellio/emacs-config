;;; config/80_site-package.el --- installed package configurations

;; Copyright (C) 2012-2019 Zachary Elliott
;; See COPYING for more information

;; This file is not part of GNU Emacs.

;;; Commentary:

;;; Code:


;;; Company Mode Con figs
(use-package company
  :config (progn
            (setq
             company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                                 company-preview-frontend
                                 company-echo-metadata-frontend)
             company-tooltip-limit 10
             company-idle-delay 0.25
             company-minimum-prefix-length 2
             company-require-match 'never
             company-show-numbers t
             company-enable-lsp-snippet t)

            (add-to-list 'company-backends #'company-capf))

  :bind (:map company-active-map
         ("SPC" . (lambda () (interactive) (company-complete-selection) (insert " ")))
         ("TAB" . company-complete-common-or-cycle)
         ("<tab>" . company-complete-common-or-cycle)
         ("S-TAB" . company-select-previous)
         ("<backtab>" . company-select-previous))

  :hook (after-init . global-company-mode))


(use-package company-terraform
  :after (company)
  :config (progn
            (require 'company-terraform)
            (company-terraform-init)))


;;; Rainbow Delimiters Mode
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))


;;; Flyspell Mode
(use-package flyspell
  :config (setq
           ispell-program-name "aspell"
           ispell-extra-args '("--sug-mode=fast"))

  :hook ((text-mode . (lambda () (flyspell-mode 1)))
         (prog-mode . flyspell-prog-mode)))


;;; Flycheck mode
(use-package flycheck
  :config (global-flycheck-mode))


;;; (rust-mode cargo racer company-racer flycheck-rust)
(with-eval-after-load 'rust-mode
  (add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
  (add-hook 'rust-mode-hook 'racer-mode)
  (add-hook 'rust-mode-hook 'cargo-minor-mode))


;;; magit-mode
(use-package magit
  :bind (("C-c m s" . magit-status)
         ("C-c m b" . magit-blame)
         ("C-c m p" . magit-process-mode)))


;;; terraform-mode


;;; enhanced ruby mode
(add-to-list 'auto-mode-alist
             '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))


;;; lsp-mode

(dolist (mode-hook '(c-mode-common-hook
                     lua-mode-hook
                     python-mode-hook
                     enh-ruby-mode-hook
                     rust-mode-hook))
  (add-hook mode-hook #'lsp-deferred))

(with-eval-after-load 'lsp-mode
  (require 'lsp-ui)

  (setq
   lsp-message-project-root-warning t
   lsp-auto-configure t
   lsp-enable-snippet t

   lsp-ui-doc-enable t
   lsp-ui-flycheck-enable t
   lsp-ui-imenu-enable nil
   lsp-ui-peek-enable t


   ;; lsp-ui-flycheck-enable t
   ;; lsp-ui-sideline-enable t
   )

  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  (add-hook 'lsp-mode-hook 'yas-minor-mode)

  (define-key lsp-ui-mode-map [remap xref-find-definitions] 'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] 'lsp-ui-peek-find-references)

  (require 'company-lsp)
  (push '(company-lsp :with company-yasnippet) company-backends))


;;; dockerfile-mode
(use-package dockerfile-mode
  :init (progn
          (put 'docker-image-name 'safe-local-variable #'stringp)
          (put 'dockerfile-image-name 'safe-local-variable #'stringp)))


;;; config/80_site-package.el ends here
