;;; config/80_site-package.el --- installed package configurations

;; Copyright (C) 2012-2019 Zachary Elliott
;; See COPYING for more information

;; This file is not part of GNU Emacs.

;;; Commentary:

;;; Code:


;;; Rainbow Delimiters Mode
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))


;;; Magit Mode
(use-package magit
  :bind (("C-c m s" . magit-status)
         ("C-c m b" . magit-blame)
         ("C-c m p" . magit-process-mode)))


;;; Yasnippet
(use-package yasnippet)


;;; Flyspell Mode
(use-package flyspell
  :config (setq
           ispell-program-name "aspell"
           ispell-extra-args '("--sug-mode=fast"))

  :hook ((text-mode . (lambda () (flyspell-mode 1)))
         (prog-mode . flyspell-prog-mode)))


;;; Flycheck
(use-package flycheck
  :config (progn
            (setq
             flycheck-temp-prefix ".flycheck")

            (global-flycheck-mode)))


;;; Markdown Mode
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))

  :config (setq
           markdown-indent-on-enter nil))


;;; YAML Mode
(use-package yaml-mode
  :config (setq
           yaml-block-literal-search-lines 512))


;; Bison/Flex Mode
(use-package bison-mode)


;;; Dockerfile Mode
(use-package dockerfile-mode
  :init (progn
          (put 'docker-image-name 'safe-local-variable #'stringp)
          (put 'dockerfile-image-name 'safe-local-variable #'stringp))

  :config (setq
           dockerfile-build-args '("--pull" "--rm")))


;;; Lua Mode
(use-package lua-mode)


;;; Terraform Mode
(use-package terraform-mode)


;; Ruby
;;; enhanced ruby mode
(use-package enh-ruby-mode
  :mode (("\\.rb\\'" . enh-ruby-mode)
         ("\\.ru\\'" . enh-ruby-mode)
         ("\\.rake\\'" . enh-ruby-mode)
         ("\\.gemspec\\'" . enh-ruby-mode)
         ("\\.jbuilder\\'" . enh-ruby-mode)
         ("\\.podspec\\'" . enh-ruby-mode)
         ("\\.thor\\'" . enh-ruby-mode)
         ("Gemfile\\'" . enh-ruby-mode)
         ("Rakefile\\'" . enh-ruby-mode)
         ("Podfile\\'" . enh-ruby-mode)
         ("Thorfile\\'" . enh-ruby-mode)
         ("Guardfile\\'" . enh-ruby-mode)
         ("Vagrantfile\\'" . enh-ruby-mode)
         ("Capfile\\'" . enh-ruby-mode))

  :config (progn
            (setq ruby-insert-encoding-magic-comment nil
                  enh-ruby-program "/home/zellio/.rvm/rubies/ruby-2.6.3/bin/ruby"
                  enh-ruby-indent-level 2
                  enh-ruby-add-encoding-comment-on-save nil
                  enh-ruby-deep-indent-paren nil
                  enh-ruby-bounce-deep-indent t
                  enh-ruby-hanging-indent-level 2)))

(use-package inf-ruby
  :config (setq
           inf-ruby-console-environment "pry"))

(use-package rubocop)

(use-package rvm
  :config (setq
           rvm--gemset-default "emacs"))

(use-package robe
  :config (with-eval-after-load "company"
            (push 'company-robe company-backends)))

(use-package bundler)


;;; Rust
(use-package rust-mode
  :config (setq
           rust-format-on-save t))

(use-package flycheck-rust
  :after (flycheck rust-mode)
  :hook (flycheck-mode . flycheck-rust-setup))

(use-package racer
  :after (rust-mode)
  :hook (rust-mode . racer-mode))

(use-package cargo
  :after (rust-mode)
  :hook (rust-mode . cargo-minor-mode))


;;; LSP
(use-package lsp
  :after (helm-lsp)

  :config   (setq
             lsp-message-project-root-warning t
             lsp-auto-configure t
             lsp-enable-snippet t)

  :hook (((c-mode-common lua-mode python-mode enh-ruby-mode rust-mode) . lsp-deferred)
         (lsp-mode . yas-minor-mode))

  :bind (:map lsp-mode-map
         ([remap xref-find-apropos] . helm-lsp-workspace-symbol)))

(use-package lsp-ui
  :after (lsp)

  :config (setq
           lsp-ui-doc-enable t
           lsp-ui-flycheck-enable t
           lsp-ui-imenu-enable nil
           lsp-ui-peek-enable t

           ;; lsp-ui-flycheck-enable t
           ;; lsp-ui-sideline-enable t
           )

  :hook (lsp-mode . lsp-ui-mode)


  :bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references)))


;;; Company
(use-package company
  :config (progn
            (setq
             company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                                 company-preview-frontend
                                 company-echo-metadata-frontend)
             company-tooltip-limit 10
             company-idle-delay 0.25
             company-minimum-prefix-length 2
             company-require-match 'never
             company-show-numbers t
             company-enable-lsp-snippet t)

            (add-to-list 'company-backends #'company-capf))

  :bind (:map company-active-map
         ("SPC" . (lambda () (interactive) (company-complete-selection) (insert " ")))
         ("TAB" . company-complete-common-or-cycle)
         ("<tab>" . company-complete-common-or-cycle)
         ("S-TAB" . company-select-previous)
         ("<backtab>" . company-select-previous))

  :hook (after-init . global-company-mode))

(use-package company-terraform
  :after (company)
  :config (progn
            (require 'company-terraform)
            (company-terraform-init)))

(use-package company-racer)

(use-package company-lsp
  :after (company lsp)
  :config (push '(company-lsp :with company-yasnippet) company-backends))


;;; config/80_site-package.el ends here
