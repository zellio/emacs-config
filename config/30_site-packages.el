;;; 30_site-package.el --- provided package configurations -*- lexical-binding: t; -*-

;; Copyright (C) 2012-2024 Zachary Elliott
;; See COPYING for more information

;; This file is not part of GNU Emacs.

;;; Commentary:

;;

;;; Code:

(use-package ansi-color
  :hook
  ((compilation-filter . (lambda ()
                           (let ((buffer-read-only nil))
                             (ansi-color-apply-on-region compilation-filter-start (point)))))
   (shell-mode . ansi-color-for-comint-mode-on))

  :custom
  (ansi-color-for-comint-mode t)
  (ansi-color-for-compilation-mode t)

  :config
  (add-to-list 'comint-output-filter-functions 'ansi-color-process-output))

(use-package apropos
  :custom
  (apropos-sort-by-scores t)
  (apropos-documentation-sort-by-scores t))

(use-package autorevert
  :hook
  (after-init . global-auto-revert-mode)

  :custom
  (auto-revert-interval 5)
  (auto-revert-mode-text "ARev")
  (auto-revert-tail-mode-text " Tail")
  (global-auto-revert-mode-text "")
  (global-auto-revert-ignore-modes '())
  (auto-revert-avoid-polling t))

(use-package bookmark
  :custom
  (bookmark-save-flag t)
  (bookmark-sort-flag 'last-modified))

(use-package delsel
  :hook (after-init . delete-selection-mode))

(use-package dired
  :custom
  (dired-mouse-drag-files t)
  (dired-hide-details-hide-symlink-targets nil)
  (dired-hide-details-hide-information-lines nil)
  (dired-kill-when-opening-new-dired-buffer t)
  (dired-auto-revert-buffer t)
  (dired-recursive-deletes 'top)
  (dired-recursive-copies 'top))

(use-package dired-x
  :custom
  (dired-x-hands-off-my-keys t))

(use-package display-line-numbers
  :hook (prog-mode . display-line-numbers-mode)
  :custom
  (display-line-numbers-width-start 100))

(use-package em-banner
  :custom
  (eshell-banner-message "Emacs Shell\n\n"))

(use-package em-dirs
  :custom
  (eshell-pushd-dunique t)
  (eshell-dirtrack-verbose nil))

(use-package em-glob
  :custom
  (eshell-glob-include-dot-dot nil)
  (eshell-glob-case-insensitive nil))

(use-package em-hist
  :custom
  (eshell-history-size (* 1024 1024))
  (eshell-hist-ignoredups t))

(use-package esh-ext
  :custom
  (eshell-command-interpreter-max-length 1024))

(use-package esh-mode
  :custom
  (eshell-scroll-to-bottom-on-input 'this)
  (eshell-scroll-to-bottom-on-output 'others)
  (eshell-buffer-maximum-lines 5120))

(use-package files
  :hook
  (before-save . delete-trailing-whitespace)

  :custom
  (make-backup-files t)
  (backup-by-copying t)
  (backup-by-copying-when-linked t)
  (find-file-existing-other-name t)
  (version-control nil)
  (delete-old-versions t)
  (kept-old-versions 3)
  (kept-new-versions 3)
  (require-final-newline 'visit-save)
  (auto-save-default t)
  (view-read-only t)
  (large-file-warning-threshold (* 1024 1024 10))
  (safe-local-variable-values '((lexical-bindings . t) (lexical-bindings . nil)))
  (confirm-kill-processes nil))

(use-package frame
  :config
  (setq
   default-frame-alist '((font . "JuliaMono-18")
                         (vertical-scroll-bars . nil)
                         (tool-bar-lines . 0)
                         (menu-bar-lines . 0)
                         (fullscreen . nil))))

(use-package ielm
  :custom
  (ielm-noisy nil)
  (ielm-prompt "IELM> "))

(use-package kmacro
  :custom
  (kmacro-ring-max 12))

(use-package menu-bar
  :hook (after-init . (lambda () (menu-bar-mode -1))))

(use-package minibuffer
  :custom
  (completion-styles '(flex basic partial-completion emacs22)))

(use-package mwheel
  :custom
  (mouse-wheel-scroll-amount '(3 ((shift) . 1) ((control) . nil)))
  (mouse-wheel-progressive-speed nil))

(use-package newcomment
  :custom
  (comment-empty-lines 'eol))

(use-package novice
  :config
  (setq
   disabled-command-function nil))

(use-package paren
  :hook
  (after-init . show-paren-mode)

  :custom
  (show-paren-style 'mixed)
  (show-paren-delay 0.1)
  (show-paren-context-when-offscreen t)

  :config
  ;; Force show-paren to act sanely
  (advice-add show-paren-data-function
              :around
              (lambda (orig-fun)
                (cond ((looking-at "\\s)")
                       (save-excursion (forward-char 1) (funcall orig-fun)))
                      (t (funcall orig-fun))))))

(use-package recentf
  :after (no-littering)

  :hook
  (after-init . recentf-mode)

  :general
  ("C-x C-r" 'recentf-open-files)

  :custom
  (recentf-max-saved-items 256)
  (recentf-arrange-by-rules-min-items 1)
  (recentf-auto-cleanup 'mode)
  (recentf-menu-filter 'recentf-arrange-by-mode)

  :config
  (push 'no-littering-var-directory recentf-exclude)
  (push 'no-littering-etc-directory recentf-exclude)

  (recentf-load-list))

(use-package register
  :after (consult)

  :config
  (setq
   register-preview-function #'consult-register-format)

  :custom
  (register-preview-delay 0.5))

(use-package replace
  :custom
  (case-replace t)
  (replace-char-fold t)
  (query-replace-skip-read-only t))

(use-package reveal
  :hook
  (after-init . global-reveal-mode)

  :custom
  (reveal-around-mark t)
  (reveal-auto-hide t))

(use-package saveplace
  :hook
  (after-init . (lambda () (save-place-mode t)))

  :custom
  (save-place-limit 256))

(use-package scroll-bar
  :hook (after-init . (lambda () (scroll-bar-mode -1))))

(use-package shell
  :custom
  (shell-has-auto-cd t))

(use-package simple
  :hook
  (after-init . column-number-mode)

  :custom
  (idle-update-delay 0.5)
  (delete-trailing-lines t)
  (goto-line-history-local t)
  (kill-ring-max 256)
  (save-interprogram-paste-before-kill t)
  (kill-do-not-save-duplicates t)
  (backward-delete-char-untabify-method 'hungry)
  (kill-whole-line t)
  (mark-ring-max 32)
  (track-eol t))

(use-package tramp
  :after (no-littering)

  :custom
  (tramp-mode t)
  (tramp-verbose 3)
  (tramp-auto-save-directory (no-littering-expand-var-file-name "backup-tramp/"))
  (tramp-default-method "ssh")
  (tramp-terminal-type "tramp")
  (tramp-connection-timeout 30))

(use-package time-stamp
  :custom
  (time-stamp-format "%Y-%02m-%02d %02H:%02M:%02S%Z"))

(use-package tool-bar
  :hook (after-init . (lambda () (tool-bar-mode -1))))

(use-package treesit
  :config
  (setq
   treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (c "https://github.com/tree-sitter/tree-sitter-c")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
     (java "https://github.com/tree-sitter/tree-sitter-java")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
     (rust "https://github.com/tree-sitter/tree-sitter-rust")
     (toml "https://github.com/ikatyang/tree-sitter-toml")
     (terraform "https://github.com/MichaHoffmann/tree-sitter-hcl" "main" "dialects/terraform/src")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  (dolist (lang-source treesit-language-source-alist)
    (let ((lang (car lang-source)))
      (unless (treesit-language-available-p lang)
        (treesit-install-language-grammar lang)))))

(use-package url-history
  :after (no-litering)
  :custom
  (url-history-track t)
  (url-history-file (no-littering-expand-var-file-name "url/history")))

(use-package url-vars
  :custom
  (url-automatic-caching t)
  (url-privacy-level '(email os emacs))
  (url-max-redirections 16))

(use-package uniquify
  :custom
  (uniquify-buffer-name-style 'forward)
  (uniquify-after-kill-buffer-p t)
  (uniquify-min-dir-content 0)
  (uniquify-trailing-separator-p t)
  (uniquify-strip-common-suffix t))

(use-package windmove
  :hook
  (after-init . windmove-default-keybindings)

  :custom
  (windmove-wrap-around t))

(use-package xref
  :after (consult)

  :custom
  (xref-show-xrefs-function #'consult-xref)
  (xref-show-definitions-function #'consult-xref))

(provide '30_site-packages.el)

;;; 30_site-packages.el ends here
