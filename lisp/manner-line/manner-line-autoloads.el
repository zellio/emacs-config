;;; manner-line-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from manner-line.el

(push '(manner-line 0 2 0) package--builtin-versions)
(autoload 'manner-line-enable-feature "manner-line" "\
Enable FEATURE hooks and symbols.

(fn FEATURE)" t)
(autoload 'manner-line-disable-feature "manner-line" "\
Disalbe FEATURE hooks and symbols.

(fn FEATURE)" t)
(autoload 'manner-line-format "manner-line" "\
Generalte `mode-line-format' from `manner-line-format'.")
(defvar manner-line-mode nil "\
Non-nil if Manner-Line mode is enabled.
See the `manner-line-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `manner-line-mode'.")
(custom-autoload 'manner-line-mode "manner-line" nil)
(autoload 'manner-line-mode "manner-line" "\
Toggle manner-line management of mode-line.

This is a global minor mode.  If called interactively, toggle the
`Manner-Line mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='manner-line-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'manner-line-enable "manner-line" "\
Unconditionally enable manner-line-mode." t)
(autoload 'manner-line-disable "manner-line" "\
Unconditionally disable manner-line-mode." t)
(register-definition-prefixes "manner-line" '("manner-line-"))


;;; Generated autoloads from manner-line-eglot.el

(push '(manner-line-eglot 0 2 0) package--builtin-versions)
(register-definition-prefixes "manner-line-eglot" '("manner-line-eglot-segment"))


;;; Generated autoloads from manner-line-face.el

(push '(manner-line-face 0 2 0) package--builtin-versions)


;;; Generated autoloads from manner-line-flycheck.el

(push '(manner-line-flycheck 0 2 0) package--builtin-versions)
(autoload 'manner-line-flycheck-segment-update "manner-line-flycheck" "\
Update `manner-line-mode' flycheck segment based on current STATUS.

(fn &optional STATUS)")
(register-definition-prefixes "manner-line-flycheck" '("manner-line-flycheck-"))


;;; Generated autoloads from manner-line-project.el

(push '(manner-line-project 0 2 0) package--builtin-versions)
(autoload 'manner-line-project-segment-update "manner-line-project" "\
Updater hook function for project mode-line segement.")
(register-definition-prefixes "manner-line-project" '("manner-line-project-"))


;;; Generated autoloads from manner-line-version-control.el

(push '(manner-line-version-control 0 2 0) package--builtin-versions)
(register-definition-prefixes "manner-line-version-control" '("manner-line-version-control-"))

;;; End of scraped data

(provide 'manner-line-autoloads)

;; Local Variables:
;; version-control: never
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; manner-line-autoloads.el ends here
