;;; asdf-vm-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from asdf-vm.el

(push '(asdf-vm 0 3 0) package--builtin-versions)


;;; Generated autoloads from asdf-vm-config.el

(push '(asdf-vm-config 0 3 0) package--builtin-versions)
(register-definition-prefixes "asdf-vm-config" '("asdf-vm-"))


;;; Generated autoloads from asdf-vm-core.el

(push '(asdf-vm-core 0 3 0) package--builtin-versions)
(register-definition-prefixes "asdf-vm-core" '("asdf-vm-"))


;;; Generated autoloads from asdf-vm-error.el

(push '(asdf-vm-error 0 3 0) package--builtin-versions)
(register-definition-prefixes "asdf-vm-error" '("asdf-vm-"))


;;; Generated autoloads from asdf-vm-installer.el

(push '(asdf-vm-installer 0 3 0) package--builtin-versions)
(autoload 'asdf-vm-installer-install "asdf-vm-installer" "\
Create, setup, and update a new asdf-vm installation at PATH.

(fn PATH)" t)
(autoload 'asdf-vm-installer-update "asdf-vm-installer" "\
Update the asdf-vm installation located at PATH.

(fn PATH)" t)
(register-definition-prefixes "asdf-vm-installer" '("asdf-v"))


;;; Generated autoloads from asdf-vm-mode.el

(push '(asdf-vm-mode 0 3 0) package--builtin-versions)
(defvar asdf-vm-mode nil "\
Non-nil if Asdf-Vm mode is enabled.
See the `asdf-vm-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `asdf-vm-mode'.")
(custom-autoload 'asdf-vm-mode "asdf-vm-mode" nil)
(autoload 'asdf-vm-mode "asdf-vm-mode" "\
Minor mode for asdf-vm interaction.

\\{asdf-vm-mode-map}

This is a global minor mode.  If called interactively, toggle the
`Asdf-Vm mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='asdf-vm-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'asdf-vm-mode-enable "asdf-vm-mode" "\
Unconditionally enable `asdf-vm-mode'.")
(autoload 'asdf-vm-mode-disable "asdf-vm-mode" "\
Unconditionally disable `asdf-vm-mode'.")
(register-definition-prefixes "asdf-vm-mode" '("asdf-vm-"))


;;; Generated autoloads from asdf-vm-plugin.el

(push '(asdf-vm-plugin 0 3 0) package--builtin-versions)
(register-definition-prefixes "asdf-vm-plugin" '("asdf-vm-plugin-"))


;;; Generated autoloads from asdf-vm-process.el

(push '(asdf-vm-process 0 3 0) package--builtin-versions)
(autoload 'asdf-vm-call "asdf-vm-process" "\
Start or enqueue a asdf subprocess. Return the process or result of execution.

This is similar to `make-process' though the arguments carry special
meaning and defaults.

The keyword values for the ARGS plist are as follows:

:name NAME -- NAME is name for the process. When not provided a name
will be construced from :name-prefix and :command.

:name-prefix NAME-PREFIX -- NAME-PREFIX is used in the construction of
NAME. It defaults to the basename of :executable.

:executable EXECUTABLE -- EXECUTABLE is the path to the executable
program to be run in the subprocess. The values defaults to
`asdf-vm-process-executable'.

:executable-arguments EXECUTABLE-ARGUMENTS -- EXECUTABLE-ARGUMENTS is a
list of strings to be passed directly after :executable and before
:command in subprocess execution. This value defaults to
`asdf-vm-process-executable-arguments'.

:command COMMAND -- COMMAND a symbol or list of sumbols representing the
subcommand of EXECUTABLE and is the first argument passed after
:executable-arguments.

:command-arguments COMMAND-ARGUMENTS -- COMMAND-ARGUMENTS is a list of
strings which is the argument values passed after :command during
subprocess execution.

:directory DIRECTORY -- DIRECTORY is the directory path in which the
subprocess is spanwed. This value will default either to the parent of
the current buffer or, if there is not one, to `default-directory'.

:buffer-name BUFFER-NAME -- BUFFER-NAME is the name of the buffer which
hosts the spawned subprocess. This value defaults based on the kind of
execution occuring. For asynchronous called the value is
`asdf-vm-process-buffer-name' and for synchronous calls it is
`asdf-vm-process-output-buffer-name'.

:output OUTPUT -- OUTPUT is a boolean flag indicating that the
`asdf-vm-call' process should both block on execution and return the
string result from subprocess exection.

:blocking BLOCKING -- BLOCKING is a boolean flag indicat taht the
`asdf-vm-call' should be made synchronously.

:success-codes SUCCESS-CODES -- SUCCESS-CODES is a list of integer
values between 1 and 255 which indicate subprocess execution success.
This list always has 0 pushed to the front.

When neighter :blocking, nor :output is set to true, execution will be
enqueued for asychronous execution. This execution starts immediately if
the queue is empty, otherwise it is kicked off immediately after the
completion of the previous asdf subprocess by `asdf-vm-process--sentinel'

(fn &rest ARGS)")
(register-definition-prefixes "asdf-vm-process" '("asdf-vm-"))


;;; Generated autoloads from asdf-vm-tool-versions.el

(push '(asdf-vm-tool-versions 0 3 0) package--builtin-versions)
(register-definition-prefixes "asdf-vm-tool-versions" '("asdf-vm-tool-versions-"))


;;; Generated autoloads from asdf-vm-util.el

(push '(asdf-vm-util 0 3 0) package--builtin-versions)
(register-definition-prefixes "asdf-vm-util" '("asdf-vm-"))


;;; Generated autoloads from test.el

(register-definition-prefixes "test" '("widget-example"))

;;; End of scraped data

(provide 'asdf-vm-autoloads)

;; Local Variables:
;; version-control: never
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; asdf-vm-autoloads.el ends here
